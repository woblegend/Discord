//META{"name":"discordCrypt"}*//

/*@cc_on
@if (@_jscript)
    var shell = WScript.CreateObject("WScript.Shell");
    var fs = new ActiveXObject("Scripting.FileSystemObject");
    var pathPlugins = shell.ExpandEnvironmentStrings("%APPDATA%\BetterDiscord\plugins");
    var pathSelf = WScript.ScriptFullName;
    shell.Popup("It looks like you mistakenly tried to run me directly. (don't do that!)", 0, "I'm a plugin for BetterDiscord", 0x30);
    if (fs.GetParentFolderName(pathSelf) === fs.GetAbsolutePathName(pathPlugins)) {
        shell.Popup("I'm in the correct folder already.\nJust reload Discord with Ctrl+R.", 0, "I'm already installed", 0x40);
    } else if (!fs.FolderExists(pathPlugins)) {
        shell.Popup("I can't find the BetterDiscord plugins folder.\nAre you sure it's even installed?", 0, "Can't install myself", 0x10);
    } else if (shell.Popup("Should I copy myself to BetterDiscord's plugins folder for you?", 0, "Do you need some help?", 0x34) === 6) {
        fs.CopyFile(pathSelf, fs.BuildPath(pathPlugins, fs.GetFileName(pathSelf)), true);
        // Show the user where to put plugins in the future
        shell.Exec("explorer " + pathPlugins);
        shell.Popup("I'm installed!\nJust reload Discord with Ctrl+R.", 0, "Successfully installed", 0x40);
    }
    WScript.Quit();
@else @*/

/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2018 Leonardo Gates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

"use strict";const discordCrypt=(()=>{let e,t,a,r=null,n=null,i=[],s=null,l={},o={},c=[],d={},u=require("original-fs"),g=require("mime-types"),p=require("form-data"),f=require("electron"),h=require("process"),y=require("crypto"),m=require("path"),b=require("zlib"),v=require("fs"),S=require("vm");const C={freeze:Object.freeze,isFrozen:Object.isFrozen,getOwnPropertyNames:Object.getOwnPropertyNames,_freeze(e){if(e&&"object"==typeof e){for(let t in C.getOwnPropertyNames(e))C._freeze(e[t]);C.freeze(e)}}},k="master",B=1820,M=14200704e5,A="⢷⢸⢹⢺",w="⢻⢼⢽⢾",E=Buffer.from("DiscordCrypt KEY GENERATION PARAMETER"),I=new Uint8Array(Buffer.from("discordCrypt MAC")),x=new Uint8Array(Buffer.from("discordCrypt-primary-secret")),P=new Uint8Array(Buffer.from("discordCrypt-secondary-secret")),O=6e4,D=5,N=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],T=["CBC","CFB","OFB"],F=["PKC7","ANS2","ISO1","ISO9"],j="https://share.riseup.net",R="59Mnk5nY6eCn4bi9GvfOXhMH54E7Bh6EMJXtyJfs",U="GTs+VoJSQC6e0GDTVRcskIVBhdqphUwqwrxqp64gXEQ=",L="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cGF0aCBkPSJNMTIgMTdjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem02LTloLTFWNmMwLTIuNzYtMi4yNC01LTUtNVM3IDMuMjQgNyA2aDEuOWMwLTEuNzEgMS4zOS0zLjEgMy4xLTMuMSAxLjcxIDAgMy4xIDEuMzkgMy4xIDMuMXYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6bTAgMTJINlYxMGgxMnYxMHoiPjwvcGF0aD48L3N2Zz4=",W="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48ZGVmcz48cGF0aCBkPSJNMCAwaDI0djI0SDBWMHoiIGlkPSJhIi8+PC9kZWZzPjxjbGlwUGF0aCBpZD0iYiI+PHVzZSBvdmVyZmxvdz0idmlzaWJsZSIgeGxpbms6aHJlZj0iI2EiLz48L2NsaXBQYXRoPjxwYXRoIGNsaXAtcGF0aD0idXJsKCNiKSIgZD0iTTEyIDE3YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptNi05aC0xVjZjMC0yLjc2LTIuMjQtNS01LTVTNyAzLjI0IDcgNnYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6TTguOSA2YzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xczMuMSAxLjM5IDMuMSAzLjF2Mkg4LjlWNnpNMTggMjBINlYxMGgxMnYxMHoiLz48L3N2Zz4=",V="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",J="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",G="eNptkEFuwyAQRa+CqLJEps7OcbzqAXoFDNhGxYBgnNS3D8RgJ1VZAPozf3j8VqgbUuKKBSczCyA9sTfpNVsx4pqF8KwUqUPtS39WCZcm+gYltfjH9F4OsGp5xWBdg870FCeidqqLzK22vvkYBhrXBZeHJslEBMt8cxhx11ZTnby9r7rnFu/BMVMsztvZwR9Lati7lXELIFhdfNdF5rv1b/hFI5k8DxY9ObpBQcL+YsB6FiT6LpWqsKEtsWOsX3QEYlqNZk/DMSGUGUlKpabu95Jiif4FwJoX7ybstrsSMDWflJ6OqBajLf8hIhORHkz6+eZMNFXE6fKx7Q/RKKw4",Y="",z={"biginterger.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:""},"curve25519.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:""},"scrypt.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:""},"sha3.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:"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"},"sidh.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:""},"sjcl.js":{requiresNode:!0,requiresBrowser:!1,minify:!0,code:""},"smalltalk.js":{requiresNode:!1,requiresBrowser:!0,minify:!0,code:"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"}},X=JSON.parse(b.inflateSync(Buffer.from("eNpl0EtKA0EQBuCrDL12Ua+urnKnxNdGBL3AmBQx+EjMjAERL+URPJk9ecAEdw399V9/9VfTJDIwUCnkZOimWdNpk86j72M9WXTT5Xr2+5NOqjQFkCLiqo4CYv/gjiGbFLOiuSDV88D2oDm7u9ki9AL1il2MGQFMx+ohuhrabSUBqKJx7WhQACWP5fXnKu7fP9rdaMFS6g4sxFizuYzpJDbxslwdclGdsjo7YX1S/wDG+GITb/2+gJrhEJfNfGh6VOAyYvbYTp8PXUUyMqGjUXY6yrxqX6O5Xcyf+vT9B30bYcE=","base64"),{windowBits:15}).toString("utf8")),Z=b.inflateSync(Buffer.from("","base64"),{windowBits:15}).toString("utf8").split("\r").join("").split("\n");class H{constructor(){r=this,this._searchUiClass=".da-search .da-searchBar"}getName(){return"DiscordCrypt"}getDescription(){return"Provides secure messaging for Discord using various cryptography standards."}getAuthor(){return"leogx9r"}getVersion(){return"2.2.2"}start(){if(H._ensureProperStartup())if(H._validPluginName()){if(!s)return H._hookSetup(),void H._loadMasterPassword();!H._shouldIgnoreUpdates(this.getVersion())&&s.automaticUpdates&&(H._checkForUpdates(),e=setInterval(()=>{H._checkForUpdates()},36e5)),H._blockTracking(),H._initGarbageCollector()}else global.smalltalk.alert("Hi There! - DiscordCrypt","Oops!\r\n\r\nIt seems you didn't read DiscordCrypt's usage guide. :(\r\nYou need to name this plugin exactly as follows to allow it to function correctly.\r\n\r\n"+`\t${H._getPluginName()}\r\n\r\n\r\n`+"You should probably check the usage guide again just in case you missed anything else. :)")}stop(){if(H._validPluginName()){for(let e=0;e<c.length;e++)c[e]();c=[],clearInterval(a),clearInterval(t),clearInterval(e),$("#dc-overlay").remove(),$("#dc-file-btn").remove(),$("#dc-lock-btn").remove(),$("#dc-passwd-btn").remove(),$("#dc-exchange-btn").remove(),$("#dc-settings-btn").remove(),$("#dc-quick-exchange-btn").remove(),$("#dc-clipboard-upload-btn").remove(),s=null}}load(){global.bdplugins&&global.bdplugins[this.getName()]&&global.bdplugins[this.getName()].plugin&&(Object.freeze(bdplugins[this.getName()]),Object.freeze(bdplugins[this.getName()].plugin)),H._injectCSS("dc-css",H.__zlibDecompress(V)),Object.freeze=C.freeze,H.__loadLibraries()}static _getDefaultConfig(){return{autoAcceptKeyExchanges:!0,automaticUpdates:!0,blacklistedUpdates:[],channels:{},encodeMessageTrigger:"ENC",encryptMode:6,encryptBlockMode:"CBC",exchangeBitSize:751,defaultPassword:"⠓⣭⡫⣮⢹⢮⠖⣦⠬⢬⣸⠳⠜⣍⢫⠳⣂⠙⣵⡘⡕⠐⢫⢗⠙⡱⠁⡷⠺⡗⠟⠡⢴⢖⢃⡙⢺⣄⣑⣗⢬⡱⣴⠮⡃⢏⢚⢣⣾⢎⢩⣙⠁⣶⢁⠷⣎⠇⠦⢃⠦⠇⣩⡅",decryptedPrefix:"🔐 ",paddingMode:"PKC7",timedMessages:[],timedMessageExpires:0,up1Host:j,up1ApiKey:R,version:r.getVersion()}}static _configExists(){let e=H._getConfigPath();if(!v.existsSync(e))return!1;let t=v.readFileSync(e);return t&&""!==t.toString()}static _loadConfig(){if(H.log("Loading configuration file ..."),!H._configExists())return s=H._getDefaultConfig(),this._saveConfig(),!0;try{s=JSON.parse(H.__zlibDecompress(H.__aes256_decrypt_gcm(JSON.parse(v.readFileSync(H._getConfigPath()).toString()).config.data,n,"PKC7","base64",!1),"base64","utf8"))}catch(e){return H.log(`Decryption of configuration file failed - ${e}`,"error"),!1}if(!s||!s.version)return H.log("Decryption of configuration file failed.","error"),!1;let e=H._getDefaultConfig(),t=!1;for(let a in e)s.hasOwnProperty(a)&&(typeof s[a]==typeof e[a]||Array.isArray(e[a]))||(s[a]=e[a],H.log(`Default value added for missing property '${a}' in the configuration file.`),t=!0);for(let a in s)e.hasOwnProperty(a)||(delete s[a],H.log(`Removing unknown property '${a}' from the configuration file.`),t=!0);if(s.version!==r.getVersion()){let e=s.version,a=s.channels;(s=H._getDefaultConfig()).channels=a,t=!0,H.log(`Updated plugin version from v${e} to v${r.getVersion()}.`)}return t&&this._saveConfig(),H.log(`Loaded configuration file! - v${s.version}`),!0}static _saveConfig(){v.writeFileSync(H._getConfigPath(),JSON.stringify({config:{data:H.__aes256_encrypt_gcm(H.__zlibCompress(JSON.stringify(s),"utf8"),n,"PKC7",!1)}}))}static _saveSettings(e){H._saveConfig(),e&&(e.text("Saved & Applied!"),setTimeout(function(){e.text("Save & Apply")},1e3))}static _resetSettings(e){let t=s.channels;(s=H._getDefaultConfig()).channels=t,H._saveConfig(),e&&(e.text("Restored Default Settings!"),setTimeout(function(){e.text("Reset Settings")},1e3))}static _updatePasswords(e,t){if("block"!==$("#dc-overlay-password").css("display"))return;let a=H._getChannelId();e&&e.length&&t&&t.length?(s.channels[a].primaryKey=e,s.channels[a].secondaryKey=t,H._setAutoEncrypt(!0)):(s.channels[a].primaryKey=s.channels[a].secondaryKey=null,H._setAutoEncrypt(!1)),H._saveConfig()}static _ensureProperStartup(){return-1!==["/channels/@me","/activity","/library","/store"].indexOf(window.location.pathname)||(f.ipcRenderer.sendSync("ELECTRON_BROWSER_WINDOW_ALERT","It seems that Discord has not been loaded on the Games or Friends tab.\nDiscordCrypt requires Discord to load on the Games or Friends tab to work correctly.\nI'll reload the client once you click OK so that it starts on the correct tab.\n\n"+`\tPath: ${window.location.pathname}`,"DiscordCrypt Error"),f.remote.app.relaunch(),f.remote.app.exit(),!1)}static _loadMasterPassword(){if(0!==$("#dc-master-overlay").length)return;const e=H._configExists(),t=e?"Unlock Database":"Create Database";$(document.body).prepend(H.__zlibDecompress(G));const a=$("#dc-db-password"),r=$("#dc-unlock-database-btn"),n=$("#dc-header-master-msg"),i=$("#dc-prompt-master-msg");n.text(e?"---------- Database Is Locked ----------":"---------- Database Not Found ----------"),i.text(e?"Enter Password:":"Enter New Password:"),r.text(t),document.getElementById("dc-master-overlay").style.display="block",a.on("keydown",e=>{13!==(e.keyCode||e.which)||r.attr("disabled")||r.click()}),r.click(H._onMasterUnlockButtonClicked(r,e,a,t))}static _checkForUpdates(){const e=$("#dc-update-check-btn");try{e.length&&(e.attr("disabled",!0),e.text("Checking For Updates ...")),H._checkForUpdate(t=>{if(e.length&&(e.attr("disabled",!1),e.text("Check For Updates")),!t)return;$("#dc-overlay").css("display","block"),$("#dc-overlay-update").css("display","block"),$("#dc-new-version").text(`New Version: ${""===t.version?"N/A":t.version} `+`( #${t.hash.slice(0,16)} - `+`Update ${t.valid?"Verified":"Contains Invalid Signature. BE CAREFUL"}! )`),$("#dc-old-version").text(`Current Version: ${r.getVersion()} `);let a=$("#dc-changelog");a.val("string"==typeof t.changelog&&t.changelog.length>0?H.__tryParseChangelog(t.changelog,r.getVersion()):"N/A"),a.scrollTop(0),o=t},s.blacklistedUpdates)}catch(e){H.log(e,"warn")}}static _loadToolbar(){if(!s)return;if("@me"===H._getChannelId())return;if(0!==$("#dc-toolbar").length)return;$(r._searchUiClass).parent().parent().parent().prepend(H.__zlibDecompress(J));let e=$("#dc-passwd-btn"),t=$("#dc-lock-btn"),a=$(".dc-svg"),n=$("<span>").addClass("dc-tooltip-text");a.attr("class","dc-svg"),t.length>0&&(H._getAutoEncrypt()?(t.html(Buffer.from(W,"base64").toString("utf8")),t.append(n.text("Disable Message Encryption"))):(t.html(Buffer.from(L,"base64").toString("utf8")),t.append(n.text("Enable Message Encryption"))),a.attr("class","dc-svg")),$(document.body).prepend(H.__zlibDecompress(Y)),H._setActiveSettingsTab(0),H._setActiveExchangeTab(0),$("#dc-secondary-cipher").val(H.__cipherIndexToString(s.encryptMode,!0)),$("#dc-primary-cipher").val(H.__cipherIndexToString(s.encryptMode,!1)),$("#dc-auto-accept-keys").prop("checked",s.autoAcceptKeyExchanges),$("#dc-settings-cipher-mode").val(s.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(s.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(s.encodeMessageTrigger),$("#dc-settings-timed-expire").val(s.timedMessageExpires),$("#dc-settings-decrypted-prefix").val(s.decryptedPrefix),$("#dc-settings-default-pwd").val(s.defaultPassword),$("#dc-settings-exchange-mode").val(s.exchangeBitSize),$("#dc-clipboard-upload-btn").click(H._onUploadEncryptedClipboardButtonClicked),$("#dc-file-btn").click(H._onFileMenuButtonClicked),$("#dc-select-file-path-btn").click(H._onChangeFileButtonClicked),$("#dc-file-upload-btn").click(H._onUploadFileButtonClicked),$("#dc-file-cancel-btn").click(H._onCloseFileMenuButtonClicked),$("#dc-settings-btn").click(H._onSettingsButtonClicked),$("#dc-plugin-settings-btn").click(H._onSettingsTabButtonClicked),$("#dc-database-settings-btn").click(H._onDatabaseTabButtonClicked),$("#dc-security-settings-btn").click(H._onSecurityTabButtonClicked),$("#dc-about-settings-btn").click(H._onAboutTabButtonClicked),$("#dc-automatic-updates-enabled").change(H._onAutomaticUpdateCheckboxChanged),$("#dc-update-check-btn").click(H._onCheckForUpdatesButtonClicked),$("#dc-import-database-btn").click(H._onImportDatabaseButtonClicked),$("#dc-export-database-btn").click(H._onExportDatabaseButtonClicked),$("#dc-erase-entries-btn").click(H._onClearDatabaseEntriesButtonClicked),$("#dc-exit-settings-btn").click(H._onSettingsCloseButtonClicked),$("#dc-settings-save-btn").click(H._onSaveSettingsButtonClicked),$("#dc-settings-reset-btn").click(H._onResetSettingsButtonClicked),$("#dc-restart-now-btn").click(H._onUpdateRestartNowButtonClicked),$("#dc-restart-later-btn").click(H._onUpdateRestartLaterButtonClicked),$("#dc-ignore-update-btn").click(H._onUpdateIgnoreButtonClicked),$("#dc-quick-exchange-btn").click(H._onQuickHandshakeButtonClicked),e.click(H._onOpenPasswordMenuButtonClicked),$("#dc-save-pwd").click(H._onSavePasswordsButtonClicked),$("#dc-reset-pwd").click(H._onResetPasswordsButtonClicked),$("#dc-cancel-btn").click(H._onClosePasswordMenuButtonClicked),$("#dc-cpy-pwds-btn").click(H._onCopyCurrentPasswordsButtonClicked),$("#dc-generate-password-btn").click(H._onGeneratePassphraseClicked),t.click(H._onForceEncryptButtonClicked)}static _initGarbageCollector(){a=setInterval(()=>{let e=Date.now();for(let t in d)d[t].initiateTime&&e-d[t].initiateTime>O&&(delete d[t],global.smalltalk.alert("KEY EXCHANGE EXPIRED",`The key exchange for the channel "${t}" has expired. Please retry again.`));for(let t in s.channels){for(let a of s.channels[t].ignoreIds){let r=e-H._extractTimestamp(a);(r<0||r>O)&&(H.log(`Deleting old key exchange message "${a}"`),delete s.channels[t].ignoreIds[s.channels[t].ignoreIds.indexOf(a)])}s.channels[t].ignoreIds=s.channels[t].ignoreIds.filter(e=>e)}H._saveConfig()},1e4),t=setInterval(()=>{let e=Date.now();s.timedMessages.forEach((t,a)=>{if(t&&t.expireTime||(s.timedMessages.splice(a,1),H._saveConfig()),t.expireTime<e){H.log(`Deleting timed message "${s.timedMessages[a].messageId}"`);try{H._deleteMessage(t.channelId,t.messageId,l)}catch(t){H.log(`${t.messageId}: ${t.toString()}`,"warn")}s.timedMessages.splice(a,1),H._saveConfig()}})},5e3)}static _hookSetup(){if(global.discordCrypt__hooked)window.location.pathname="/channels/@me";else{global.discordCrypt__hooked={},C.freeze(global.discordCrypt__hooked);try{const e=H._getWebpackModuleSearcher();l={MessageCreator:e.findByUniqueProperties(["createMessage","parse","unparse"]),MessageController:e.findByUniqueProperties(["sendClydeError","sendBotMessage"]),EventDispatcher:e.findByUniqueProperties(["dispatch","maybeDispatch","dirtyDispatch"]),MessageQueue:e.findByUniqueProperties(["enqueue","handleSend","handleResponse"]),UserStore:e.findByUniqueProperties(["getUser","getUsers","findByTag","getCurrentUser"]),GuildStore:e.findByUniqueProperties(["getGuild","getGuilds"]),ChannelStore:e.findByUniqueProperties(["getChannel","getChannels","getDMFromUserId","getDMUserIds"])};for(let e in l)if("object"!=typeof l[e])return void global.smalltalk.alert("Error Loading DiscordCrypt",`Could not find requisite module: ${e}`);if(!H._hookMessageCallbacks())return void global.smalltalk.alert("Error Loading DiscordCrypt","Failed to hook the required modules.");H._monkeyPatch(e.findByUniqueProperties(["isEmojiDisabled"]),"isEmojiDisabled",{instead(e){try{if(H._getChannelId()===e.methodArguments[1].id&&H._hasCustomPassword(e.methodArguments[1].id)&&H._getAutoEncrypt())return!1}catch(e){}return e.callOriginalMethod()}});let t=e.findByUniqueProperties(["getImageSrc","getSizedImageSrc"]);const a=e=>{e.methodArguments[0]&&0===e.methodArguments[0].indexOf("data:")&&(e.returnValue=e.methodArguments[0])};H._monkeyPatch(t,"getImageSrc",{after:a}),H._monkeyPatch(t,"getSizedImageSrc",{after:a})}catch(e){H.log("Could not hook the required methods. If this is a test, that's fine.","warn")}}}static _hookMessageCallbacks(){return H._monkeyPatch(l.EventDispatcher,"dispatch",{instead:H._onDispatchEvent}),l.MessageQueue.original_enqueue=H._monkeyPatch(l.MessageQueue,"enqueue",{instead:H._onOutgoingMessage}).original,i.push({type:"CHANNEL_SELECT",callback:H._onChannelSwitched}),i.push({type:"MESSAGE_CREATE",callback:H._onIncomingMessage}),i.push({type:"MESSAGE_UPDATE",callback:H._onIncomingMessage}),i.push({type:"LOAD_MESSAGES_SUCCESS",callback:H._onIncomingMessages}),i.push({type:"LOAD_MESSAGES_AROUND_SUCCESS",callback:H._onIncomingMessages}),i.push({type:"LOAD_RECENT_MENTIONS_SUCCESS",callback:H._onIncomingMessages}),i.push({type:"LOAD_PINNED_MESSAGES_SUCCESS",callback:H._onIncomingMessages}),!0}static _onDispatchEvent(e){let t=!1;try{for(let a=0;a<i.length;a++)e.methodArguments[0].type===i[a].type&&(i[a].callback(e),t=!0)}catch(e){}t||e.callOriginalMethod()}static _onChannelSwitched(e){let t=e.methodArguments[0].channelId;H._getChannelId()===t&&(s&&!s.channels[t]&&(s.channels[t]={primaryKey:null,secondaryKey:null,autoEncrypt:!0,ignoreIds:[]}),setTimeout(()=>{H._updateLockIcon(r),H._loadToolbar()},1)),e.callOriginalMethod()}static _onIncomingMessage(e){(async()=>{for(;!s;)await new Promise(e=>setTimeout(e,1e3));e.methodArguments[0].message=H._decryptMessage(e.methodArguments[0].channelId||e.methodArguments[0].message.channel_id,e.methodArguments[0].message);let t=H.__up1ExtractValidUp1URLs(e.methodArguments[0].message.content);if(!t.length)return void e.originalMethod.apply(e.thisObject,e.methodArguments);let a=0;for(let r=0;r<t.length;r++){let n=t[r].split(`${s.up1Host}/#`).join("").split(`|${s.encodeMessageTrigger}`)[0];!async function(){await H.__up1DecryptDownload(n,s.up1Host,global.sjcl,n=>{if("object"!=typeof n)return void(a+=1);let i={id:H._getNonce(),filename:n.header.name,size:n.blob.size,url:t[r]};if(-1!==n.header.mime.indexOf("image/")){let e=new Image;e.src=`data:${n.header.mime};base64,${n.data.toString("base64")}`,i.width=e.width,i.height=e.height,i.url=e.src}e.methodArguments[0].message.attachments?e.methodArguments[0].message.attachments.push(i):e.methodArguments[0].message.attachments=[i],a+=1})}()}for(;a!==t.length;)await new Promise(e=>setTimeout(e,1e3));e.originalMethod.apply(e.thisObject,e.methodArguments)})()}static _onIncomingMessages(e){let t=e.methodArguments[0].channelId,a=e.methodArguments[0].messages;(async()=>{for(;!s;)await new Promise(e=>setTimeout(e,1e3));for(let e=0;e<a.length;e++)a[e]=H._decryptMessage(t,a[e]),a[e].content.length||a[e].embeds||delete a[e];e.methodArguments[0].messages=a.filter(e=>e),e.originalMethod.apply(e.thisObject,e.methodArguments)})()}static _onOutgoingMessage(e){let t,a;(async()=>{await(async()=>{for(;!s;)await new Promise(e=>setTimeout(e,1e3))})();let r=e.methodArguments[0].message;if("boolean"!=typeof(a=H._tryEncryptMessage(r.content,!1,r.channelId,s.decryptedPrefix))&&a.length>0&&(r.content=a[0].message),r.embed){r.embed.description&&"boolean"!=typeof(t=H._tryEncryptMessage(r.embed.description,!1,r.channelId))&&1===t.length&&(r.embed.description=t[0].message);for(let e=0;r.embed.fields&&e<r.embed.fields.length;e++)"boolean"!=typeof(t=H._tryEncryptMessage(r.embed.fields[e].name,!1,r.channelId))&&1===t.length&&(r.embed.fields[e].name=t[0].message),"boolean"!=typeof(t=H._tryEncryptMessage(r.embed.fields[e].value,!1,r.channelId))&&1===t.length&&(r.embed.fields[e].value=t[0].message)}if(e.methodArguments[0].message=r,e.originalMethod.apply(e.thisObject,e.methodArguments),1!==a.length)for(let e=1;e<a.length;e++)H._dispatchMessage(a[e].message,r.channelId)})()}static _decryptMessage(e,t){const a=(e,t,a,r,n)=>{let i=H._parseMessage(t,a,r,n,s.decryptedPrefix);if("string"==typeof i&&i.length){let t=H._getMentionsForMessage(i,e);t.mentions.length&&(a.mentions?a.mentions=a.mentions.concat(t.mentions).filter((e,t,a)=>t===a.indexOf(e)):a.mentions=t.mentions),t.mention_roles.length&&(a.mention_roles?a.mention_roles=a.mention_roles.concat(t.mention_roles).filter((e,t,a)=>t===a.indexOf(e)):a.mention_roles=t.mention_roles),a.mention_everyone=a.mention_everyone||t.mention_everyone}return i};let r=Buffer.from(s.channels[e]&&s.channels[e].primaryKey?s.channels[e].primaryKey:s.defaultPassword),n=Buffer.from(s.channels[e]&&s.channels[e].secondaryKey?s.channels[e].secondaryKey:s.defaultPassword);if(H._isFormattedMessage(t.content)){let i=a(e,t.content.substr(1,t.content.length-2),t,r,n);"string"==typeof i&&(t.content=i)}for(let i=0;t.embeds&&i<t.embeds.length;i++){if(t.embeds[i].description&&H._isFormattedMessage(t.embeds[i].description)){let s=a(e,t.embeds[i].description.substr(1,t.embeds[i].description.length-2),t,r,n);"string"==typeof s&&(t.embeds[i].description=s)}for(let s=0;t.embeds[i].fields&&s<t.embeds[i].fields.length;s++){if(H._isFormattedMessage(t.embeds[i].fields[s].name)){let l=a(e,t.embeds[i].fields[s].name.substr(1,t.embeds[i].fields[s].name-2),t,r,n);"string"==typeof l&&(t.embeds[i].fields[s].name=l)}if(H._isFormattedMessage(t.embeds[i].fields[s].value)){let l=a(e,t.embeds[i].fields[s].value.substr(1,t.embeds[i].fields[s].value.length-2),t,r,n);"string"==typeof l&&(t.embeds[i].fields[s].value=l)}}}return t}static _setAutoEncrypt(e){s.channels[H._getChannelId()].autoEncrypt=e}static _getAutoEncrypt(e){return e=e||H._getChannelId(),!s||!s.channels[e]||s.channels[e].autoEncrypt}static _hasCustomPassword(e){return s.channels[e]&&s.channels[e].primaryKey&&s.channels[e].secondaryKey}static _getMentionsForMessage(e,t){const a=/<@!?([0-9]{10,24})>/g,r=/<@&([0-9]{10,24})>/g;let n={mentions:[],mention_roles:[],mention_everyone:!1};t=t||H._getChannelId();let i=H._getChannelProps(t);return i?(e=l.MessageCreator.parse(i,e).content,a.test(e)&&(n.mentions=e.match(a).map(e=>({id:e.replace(/[^0-9]/g,"")}))),r.test(e)&&(n.mention_roles=e.match(r).map(e=>e.replace(/[^0-9]/g,""))),n.mention_everyone=/(?:\s+|^)@everyone(?:\s+|$)/.test(e),n):n}static _handleAcceptedKeyRequest(e,t){let a;d.hasOwnProperty(e.channel_id)&&d[e.channel_id].privateKey||(d[e.channel_id]={},d[e.channel_id].initiateTime=Date.now(),"dh"===t.algorithm.toLowerCase()?d[e.channel_id].privateKey=H.__generateDH(t.bit_length):d[e.channel_id].privateKey=H.__generateECDH(t.bit_length),a=H.__encodeExchangeKey(Buffer.from(d[e.channel_id].privateKey.getPublicKey("hex","ecdh"===t.algorithm.toLowerCase()?"compressed":null),"hex"),t.index),H._dispatchMessage(`\`${a}\``,e.channel_id,D),d[e.channel_id].localKey=H.__extractExchangeKeyInfo(a,!0)),d[e.channel_id].remoteKey=t;let r=H._deriveExchangeKeys(e.channel_id);return delete d[e.channel_id],r&&r.primaryKey&&r.secondaryKey?(s.channels[e.channel_id].primaryKey=r.primaryKey,s.channels[e.channel_id].secondaryKey=r.secondaryKey,H._saveConfig(),"🔏 **[ SESSION ]** **✓** *ESTABLISHED NEW SESSION* !!!\n\n"+`Algorithm: ${t.canonical_name}\n`+`Primary Entropy: **${H.__entropicBitLength(r.primaryKey)} Bits**\n`+`Secondary Entropy: **${H.__entropicBitLength(r.secondaryKey)} Bits**\n`):(H.log(`Failed to establish a session in channel: ${e.channel_id}`,"error"),"🚫 **[ ERROR ]** FAILED TO ESTABLISH A SESSION !!!")}static _parseKeyMessage(e,t){if(e.timestamp&&Date.now()-new Date(e.timestamp)>O)return"";let a=H.__extractExchangeKeyInfo(t,!0);if(null===a)return"🚫 **[ ERROR ]** `INVALID PUBLIC KEY !!!`";if(!l.UserStore||"function"!=typeof l.UserStore.getCurrentUser||"function"!=typeof l.UserStore.getUser||"function"!=typeof l.ChannelStore.getChannels)return"🚫 **[ ERROR ]** `CANNOT RESOLVE DEPENDENCY MODULE !!!`";let r=l.ChannelStore.getChannels();if(r&&r[e.channel_id]&&1!==r[e.channel_id].type)return"🚫 **[ ERROR ]** `INCOMING KEY EXCHANGE FROM A NON-DM !!!`";let n=l.UserStore.getCurrentUser(),i=l.UserStore.getUser(e.author.id);if(s.channels[e.channel_id]&&-1!==s.channels[e.channel_id].ignoreIds.indexOf(e.id))return"";if(e.author.id===n.id){let t;return"🔏 **[ SESSION ]** *OUTGOING KEY EXCHANGE*\n\n"+`Algorithm: ${(t=d.hasOwnProperty(e.channel_id)&&d[e.channel_id].privateKey?d[e.channel_id].localKey:a).canonical_name}\n`+`Checksum: **${t.fingerprint}**`}if(s.channels[e.channel_id].ignoreIds.push(e.id),H._saveConfig(),d.hasOwnProperty(e.channel_id)||s.autoAcceptKeyExchanges)return H._handleAcceptedKeyRequest(e,a);let o="";return async function(){await global.smalltalk.confirm("----- INCOMING KEY EXCHANGE REQUEST -----",`User @${i.username}#${i.discriminator} wants to perform a key exchange.`+"\n\n"+`Algorithm: ${a.algorithm.toUpperCase()}-${a.bit_length}`+"\n"+`Checksum: ${a.fingerprint}`+"\n\nDo you wish to start a new secure session with them using these parameters?").then(()=>{o=Date.now()-Date.parse(e.timestamp)>O?"🚫 **[ ERROR ]** SESSION KEY EXPIRED":H._handleAcceptedKeyRequest(e,a)},()=>{o="🔏 **[ INFO ]** *IGNORED EXCHANGE MESSAGE*"})}(),o}static _parseMessage(e,t,a,r,n,i=!0){if(e.length<=12)return!1;let s=e.slice(0,4);if(i&&s===w)return H._parseKeyMessage(t,e);if(s!==A)return!1;let l=H.__metaDataDecode(e.slice(4,8));if(l[0]>=N.length)return!1;if(l[1]>=T.length)return!1;if(l[2]>=F.length)return!1;let o=H.__symmetricDecrypt(e.replace(/\r?\n|\r/g,"").substr(8),a,r,l[0],l[1],l[2]);if(("string"==typeof o||o instanceof String)&&""!==o)return n&&"string"==typeof n&&n.length>0&&(o=n+o),o;switch(o){case 1:return"🚫 **[ ERROR ]** `AUTHENTICATION OF CIPHER TEXT FAILED !!!`";case 2:return"🚫 **[ ERROR ]** `FAILED TO DECRYPT CIPHER TEXT !!!`";default:return"🚫 **[ ERROR ]** `DECRYPTION FAILURE. INVALID KEY OR MALFORMED MESSAGE !!!`"}}static _tryEncryptMessage(e,t,a,r){let n,i=a||"0";if("##"===e.substr(0,2))return!1;if(!1!==t||s.channels[a]&&s.channels[a].primaryKey&&H._getAutoEncrypt())n=e;else{if((e=e.split("|")).length<=0)return!1;if(e[e.length-1]!==s.encodeMessageTrigger)return!1;e.pop(),n=e.join("|")}if(0===n.length)return!1;r&&""!==r&&0===n.indexOf(r)&&(n=n.substr(r.length));let l=H._getChannelProps(a);if(0===l.type&&X.hasOwnProperty(l.guild_id))return H.log("Blacklisted Guild. Ignoring outgoing message ...","warn"),!1;let o=Buffer.from(s.channels[i]&&s.channels[i].primaryKey?s.channels[i].primaryKey:s.defaultPassword),c=Buffer.from(s.channels[i]&&s.channels[i].secondaryKey?s.channels[i].secondaryKey:s.defaultPassword);if(n.length+16<B){let e=H.__symmetricEncrypt(n,o,c,s.encryptMode,s.encryptBlockMode,s.paddingMode);return[{message:`\`${e=A+H.__metaDataEncode(s.encryptMode,s.encryptBlockMode,s.paddingMode,parseInt(y.pseudoRandomBytes(1)[0].toString()))+e}\``}]}let d=H.__splitStringChunks(n,B),u=[];for(let e=0;e<d.length;e++){let t=H.__symmetricEncrypt(d[e],o,c,s.encryptMode,s.encryptBlockMode,s.paddingMode);t=A+H.__metaDataEncode(s.encryptMode,s.encryptBlockMode,s.paddingMode,parseInt(y.pseudoRandomBytes(1)[0].toString()))+t,u.push({message:`\`${t}\``})}return u}static _sendEncryptedMessage(e,t=!1,a){let r=H._tryEncryptMessage(e,t,a||H._getChannelId(),s.decryptedPrefix);if("object"!=typeof r)return!1;for(let e=0;e<r.length;e++)H._dispatchMessage(r[e].message,a);return H._saveConfig(),!0}static _blockTracking(){let e=H._getWebpackModuleSearcher();const t=(t,a)=>{((e,t,a)=>{try{let r=a(Array.isArray(e)?e:[e]);Array.isArray(e)?r.prototype[e[0]]=t:r.prototype[e]=t,C._freeze(r.prototype)}catch(t){H.log(`Failed to hook method: ${Array.isArray(e)?e[0]:e}\n${t}`,"warn")}})(t,()=>H.log(a,"info"),e.findByUniquePrototypes)},a=(t,a,r)=>{((e,t,a)=>{try{let r=a(Array.isArray(e)?e:[e]);Array.isArray(e)?r[e[0]]=t:r[e]=t,C._freeze(r)}catch(t){H.log(`Failed to hook method: ${Array.isArray(e)?e[0]:e}\n${t}`,"warn")}})(t,r||(()=>H.log(a,"info")),e.findByUniqueProperties)};t("_sendQualityReports","Blocked a voice quality report."),t("_sendProcessedPayload","Blocked a Sentry tracking report."),t("trackWithMetadata","Blocked metadata tracking."),t("trackWithGroupMetadata","Blocked metadata tracking."),t("trackWithOverlayMetadata","Blocked metadata tracking."),a("getAnalyticsToken","",()=>(H.log("Blocked retrieval of analytics token.","info"),"")),a("sendEvent","",()=>(H.log("Blocked BrainTree from sending analytics.","info"),"")),a("hasSuspiciousCode","Disabling suspicious code reporting",()=>!1)}static _onMasterUnlockButtonClicked(e,t,a,i){return()=>{if(!a.val().length)return;e.attr("disabled",!0),t?e.text("Unlocking Database ..."):e.text("Creating Database ...");let l=a.val();if(l&&!H.__validatePasswordRequisites(l))return e.text(i),void e.attr("disabled",!1);let o=global.scrypt.hash(Buffer.from(l),Buffer.from(global.sha3.sha3_256(l),"hex"),16384,16,1,32);if(o){if(n=Buffer.from(o),!H._loadConfig())return s=null,t?e.text("Invalid Password!"):e.text("Failed to create the database!"),a.val(""),void setTimeout(function(){e.text(i),e.attr("disabled",!1)},1e3);r.start(),t?e.text("Unlocked Successfully!"):e.text("Created Successfully!"),setTimeout(function(){$("#dc-master-overlay").remove()},1e3)}else t?e.text("Invalid Password!"):e.text("Error: Scrypt Failed!}"),a.val(""),setTimeout(function(){e.text(i)},1e3)}}static _onFileMenuButtonClicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-upload").css("display","block")}static _onChangeFileButtonClicked(){let e=f.remote.dialog.showOpenDialog({title:"Select a file to encrypt and upload",buttonLabel:"Select",message:"Maximum file size is 50 MB",properties:["openFile","showHiddenFiles","treatPackageAsDirectory"]});e.length&&e[0].length&&$("#dc-file-path").val(e[0])}static _onUploadEncryptedClipboardButtonClicked(){let e=H._getChannelId();H.__up1UploadClipboard(s.up1Host,s.up1ApiKey,global.sjcl,(t,a,r)=>{null===t&&"string"==typeof a&&"string"==typeof r?(H._sendEncryptedMessage(`${a}`,!0,e),f.clipboard.writeText(`Delete URL: ${r}`)):global.smalltalk.alert("Failed to upload the clipboard!",t)})}static _onUploadFileButtonClicked(){let e=$("#dc-file-path"),t=$("#dc-file-upload-btn"),a=$("#dc-file-message-textarea"),r=$("#dc-file-deletion-checkbox").is(":checked"),n=$("#dc-file-name-random-checkbox").is(":checked");a.val().length>0&&H._sendEncryptedMessage(a.val(),!0);let i=H._getChannelId();a.val(""),u.existsSync(e.val())?(t.text("Uploading ..."),t.addClass("dc-button-inverse"),H.__up1UploadFile(e.val(),s.up1Host,s.up1ApiKey,global.sjcl,(a,n,s)=>{if(null!==a||"string"!=typeof n||"string"!=typeof s)return t.text("Failed to upload the file!"),H.log(a,"error"),e.val(""),void setTimeout(()=>{t.text("Upload"),t.removeClass("dc-button-inverse")},1e3);H._sendEncryptedMessage(`${n}${r?"\n\nDelete URL: "+s:""}`,!0,i),e.val(""),t.text("Upload Successful!"),setTimeout(()=>{t.text("Upload"),t.removeClass("dc-button-inverse"),$("#dc-file-cancel-btn").click()},1e3)},n)):e.val("")}static _onCloseFileMenuButtonClicked(){$("#dc-file-path").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-upload").css("display","none")}static _onSettingsButtonClicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-settings").css("display","block")}static _onSettingsTabButtonClicked(){H._setActiveSettingsTab(0)}static _onDatabaseTabButtonClicked(){let e=$("#dc-database-entries");e.html("");let t=l.UserStore.getUsers(),a=l.GuildStore.getGuilds(),r=l.ChannelStore.getChannels();for(let n in s.channels){let i,l="",o=n;if(!r[o])continue;if(!s.channels[o].primaryKey||!s.channels[o].secondaryKey)continue;if(i="https://cdn.discordapp.com/icons/444361997811974144/74cb26731242af7fdd60a62c29dc7560.png",0===r[o].type){let e=a[r[o].guild_id];l=`${e.name} ( #${r[o].name} )`,e.icon&&(i=`https://cdn.discordapp.com/icons/${r[o].guild_id}/${e.icon}.png`)}else if(1===r[o].type){let e=t[r[o].recipients[0]];l=`@${e.username}`,e.id&&e.avatar&&(i=`https://cdn.discordapp.com/avatars/${e.id}/${e.avatar}.png?size=128`)}else{if(3!==r[o].type)continue;if(r[o].name)l=r[o].name;else{let e=r[o].recipients.length>3?3:r[o].recipients.length,a="";for(let n=0;n<e;n++){let e=t[r[o].recipients[n]];a+=`@${e.username}#${e.discriminator} `}l=`${a}`}r[o].icon&&(i=`https://cdn.discordapp.com/channel-icons/${o}/${r[o].icon}.png`)}let c=$(`<tr>\n                                <td class="dc-ruler-align">\n                                    <div class="dc-icon" style="background-image:url(${i});"></div>\n                                    <p>${l}</p>\n                                </td>\n                                <td>\n                                    <div style="display:flex;"></div>\n                                </td>\n                            </tr>`),d=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Delete Keys"),u=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Copy Keys"),g=$("<div>").addClass("dc-tooltip").css("background-color","transparent").html(Buffer.from(s.channels[o].autoEncrypt?W:L,"base64").toString("utf8"));d.click(function(){s.channels[o].primaryKey=s.channels[o].secondaryKey=null,s.channels[o].autoEncrypt=!1,H._saveConfig(),d.parent().parent().remove()}),u.click(function(){let e=s.channels[o],t=e.primaryKey||s.defaultPassword,a=e.secondaryKey||s.defaultPassword;f.clipboard.writeText(`Primary Key: ${t}\n\nSecondary Key: ${a}`),u.text("Copied"),setTimeout(()=>{u.text("Copy Keys")},1e3)}),g.click(function(){s.channels[o].autoEncrypt=!s.channels[o].autoEncrypt,H._saveConfig(),g.html(Buffer.from(s.channels[o].autoEncrypt?W:L,"base64").toString("utf8"))}),$($(c.children()[1]).children()[0]).append(g),$($(c.children()[1]).children()[0]).append(u),$($(c.children()[1]).children()[0]).append(d),e.append(c)}H._setActiveSettingsTab(1)}static _onSecurityTabButtonClicked(){const e=(e,t)=>{let a="";Buffer.isBuffer(e)||(e=Buffer.from(e)),e=Array.prototype.map.call(e,e=>`00${e.toString(16).toUpperCase()}`.slice(-2));for(let r=0;r<e.length;r++)a+=`${t&&r&&r%16==0?"\n":""}${e[r]} `;return a.trim()};let t=$("#dc-update-blacklist-entries");t.html("");for(let a=0;a<s.blacklistedUpdates.length;a++){let n=s.blacklistedUpdates[a];if(!n)continue;let i=$(`<tr><td>${n.version}</td><td><div style="display:flex;"></div></td></tr>`),l=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Remove"),o=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("View Changelog"),c=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Info");l.click(function(){delete s.blacklistedUpdates[a],s.blacklistedUpdates=s.blacklistedUpdates.filter(e=>e),H._saveConfig(),l.parent().parent().parent().remove()}),o.click(function(){global.smalltalk.alert("Changes",H.__tryParseChangelog(n.changelog,r.getVersion()))}),c.click(function(){global.smalltalk.alert("Update Info",`<strong>Version</strong>: ${n.version}\n\n`+`<strong>Verified</strong>: ${n.valid?"Yes":"No"}\n\n`+`<strong>Hash</strong>: ${n.hash.toUpperCase()}\n\n`+'<strong>Signature</strong>:\n<code class="hljs dc-code-block" style="background: none !important;">'+`\n${e(n.signature,!0)}\n</code>`)}),$($(i.children()[1]).children()[0]).append(o),$($(i.children()[1]).children()[0]).append(c),$($(i.children()[1]).children()[0]).append(l),t.append(i)}$("#dc-automatic-updates-enabled").prop("checked",s.automaticUpdates),H._setActiveSettingsTab(2)}static _onAboutTabButtonClicked(){H._setActiveSettingsTab(3)}static _onAutomaticUpdateCheckboxChanged(){s.automaticUpdates=$("#dc-automatic-updates-enabled").is(":checked"),H._saveConfig(),H.log(`${s.automaticUpdates?"En":"Dis"}abled automatic updates.`,"debug"),H._shouldIgnoreUpdates(r.getVersion())||(s.automaticUpdates?e||(e=setInterval(()=>{H._checkForUpdates()},36e5)):e&&(clearInterval(e),e=null))}static _onCheckForUpdatesButtonClicked(){H._checkForUpdates()}static _onImportDatabaseButtonClicked(){let e=f.remote.dialog.showOpenDialog({title:"Import Database",message:"Select the configuration file(s) to import",buttonLabel:"Import",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}],properties:["openFile","multiSelections","showHiddenFiles","treatPackageAsDirectory"]});if(!e||!e.length)return;let t=$("#dc-import-database-btn"),a=0;t.text(`Importing ( ${e.length} ) File(s)`);for(let t=0;t<e.length;t++){let r,n=e[t];if(v.statSync(n).isFile()){try{r=JSON.parse(v.readFileSync(n).toString())}catch(e){H.log(`Error reading JSON file '${n} ...`,"warn");continue}if(r._discordCrypt_entries&&r._discordCrypt_entries.length)for(let e=0;e<r._discordCrypt_entries.length;e++){let t=r._discordCrypt_entries[e];t.id&&t.primary&&t.secondary&&(s.channels.hasOwnProperty(t.id)||a++,s.channels[t.id]?(s.channels[t.id].primaryKey=t.primary,s.channels[t.id].secondaryKey=t.secondary):s.channels[t.id]={primaryKey:t.primary,secondaryKey:t.secondary,encodeAll:!0,ignoreIds:[]})}}}setTimeout(()=>{t.text(`Imported (${a}) ${1===a?"Entry":"Entries"}`),setTimeout(()=>{t.text("Import Database(s)")},1e3)},500),0!==a&&(H._onDatabaseTabButtonClicked(),H._saveConfig())}static _onExportDatabaseButtonClicked(){let e=H.__generateWordCaptcha({security:32});global.smalltalk.prompt("EXPORT WARNING",'Exporting your database is <b>DANGEROUS</b>.\n\nYou should only do this when <u>explicitly</u> directed by the plugin\'s developers.\n\n\n<b>N.B. Exports will NOT be encrypted. Be responsible.</b>\n\nEnter the following and click "OK" to export the database:\n\n\n'+`<p style="text-indent: 20px"><b>${e.captcha}</b></p>\n\n`,"").then(t=>{if(t.toLowerCase().trim()!==e.passphrase)return void setImmediate(H._onExportDatabaseButtonClicked);let a=f.remote.dialog.showSaveDialog({title:"Export Database",message:"Select the destination file",buttonLabel:"Export",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}]});if(!a||!a.length)return;let r,n=$("#dc-export-database-btn"),i={_discordCrypt_entries:[]};for(let e in s.channels){let t=s.channels[e];t&&t.primaryKey&&t.secondaryKey&&i._discordCrypt_entries.push({id:e,primary:t.primaryKey,secondary:t.secondaryKey})}r=i._discordCrypt_entries.length;try{v.writeFileSync(a,JSON.stringify(i,null,"    ")),n.text(`Exported (${r}) ${1===r?"Entry":"Entries"}`)}catch(e){H.log(`Error exporting entries: ${e.toString()}`,"error"),n.text("Error: See Console")}setTimeout(()=>{n.text("Export Database")},1e3)},()=>{})}static _onClearDatabaseEntriesButtonClicked(){let e=$("#dc-erase-entries-btn");for(let e in s.channels)s.channels[e].primaryKey=s.channels[e].secondaryKey=null;$("#dc-database-entries").html(""),H._saveConfig(),e.text("Cleared Entries"),setTimeout(()=>{e.text("Erase Entries")},1e3)}static _onSettingsCloseButtonClicked(){H._setActiveSettingsTab(0),$("#dc-overlay").css("display","none"),$("#dc-overlay-settings").css("display","none")}static _onSaveSettingsButtonClicked(){let e=$("#dc-primary-cipher"),t=$("#dc-secondary-cipher"),a=$("#dc-master-password"),r=$("#dc-settings-save-btn");if(s.timedMessageExpires=parseInt($("#dc-settings-timed-expire").val()),s.autoAcceptKeyExchanges=$("#dc-auto-accept-keys").is(":checked"),s.exchangeBitSize=parseInt($("#dc-settings-exchange-mode").val()),s.encodeMessageTrigger=$("#dc-settings-encrypt-trigger").val(),s.decryptedPrefix=$("#dc-settings-decrypted-prefix").val(),s.encryptBlockMode=$("#dc-settings-cipher-mode").val(),s.defaultPassword=$("#dc-settings-default-pwd").val(),s.paddingMode=$("#dc-settings-padding-mode").val(),s.encryptMode=H.__cipherStringToIndex(e.val(),t.val()),e.val(H.__cipherIndexToString(s.encryptMode,!1)),t.val(H.__cipherIndexToString(s.encryptMode,!0)),H._updateLockIcon(),""!==a.val()){let e=a.val();if(!H.__validatePasswordRequisites(e))return;a.val(""),r.attr("disabled",!0);let t=global.scrypt.hash(Buffer.from(e),Buffer.from(global.sha3.sha3_256(e),"hex"),16384,16,1,32);if(r.attr("disabled",!1),!t||"string"!=typeof t||!t.length)return void global.smalltalk.alert("DiscordCrypt Error","Error setting the new database password. Check the console for more info.");n=Buffer.from(t),H._saveSettings(r)}else H._saveSettings(r)}static _onResetSettingsButtonClicked(){H._resetSettings($("#dc-settings-reset-btn")),$("#dc-secondary-cipher").val(H.__cipherIndexToString(s.encryptMode,!0)),$("#dc-primary-cipher").val(H.__cipherIndexToString(s.encryptMode,!1)),$("#dc-auto-accept-keys").prop("checked",s.autoAcceptKeyExchanges),$("#dc-settings-cipher-mode").val(s.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(s.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(s.encodeMessageTrigger),$("#dc-settings-timed-expire").val(s.timedMessageExpires),$("#dc-settings-decrypted-prefix").val(s.decryptedPrefix),$("#dc-settings-exchange-mode").val(s.exchangeBitSize),$("#dc-settings-default-pwd").val(s.defaultPassword),$("#dc-master-password").val("")}static _onUpdateRestartNowButtonClicked(){const e=m.join(H._getPluginsPath(),H._getPluginName());v.writeFile(e,o.payload,t=>{t&&(H.log("Unable to replace the target plugin. "+`( ${t} )\nDestination: ${e}`,"error"),global.smalltalk.alert("Error During Update","Failed to apply the update!"))}),window.location.pathname="/channels/@me"}static _onUpdateRestartLaterButtonClicked(){const e=m.join(H._getPluginsPath(),H._getPluginName());v.writeFile(e,o.payload,t=>{t&&(H.log("Unable to replace the target plugin. "+`( ${t} )\nDestination: ${e}`,"error"),global.smalltalk.alert("Error During Update","Failed to apply the update!"))}),H._setActiveSettingsTab(0),H._setActiveExchangeTab(0),$("#dc-overlay").css("display","none"),$("#dc-overlay-update").css("display","none")}static _onUpdateIgnoreButtonClicked(){o.payload="",s.blacklistedUpdates.push(o),H._saveConfig(),H._setActiveSettingsTab(0),H._setActiveExchangeTab(0),$("#dc-overlay").css("display","none"),$("#dc-overlay-update").css("display","none")}static _onQuickHandshakeButtonClicked(){const e=H.__getDHBitSizes(),t=H.__getECDHBitSizes();let a=H._getChannelId();if(d.hasOwnProperty(a))return void global.smalltalk.alert("----- WARNING -----","Cannot start a new session while an existing handshake is pending ...");d[a]={};let r=-1===e.indexOf(s.exchangeBitSize);d[a].privateKey=r?H.__generateECDH(s.exchangeBitSize):H.__generateDH(s.exchangeBitSize);let n=H.__encodeExchangeKey(Buffer.from(d[a].privateKey.getPublicKey("hex",r?"compressed":null),"hex"),r?e.length+t.indexOf(s.exchangeBitSize):e.indexOf(s.exchangeBitSize));H._dispatchMessage(`\`${n}\``,a,D),d[a].localKey=H.__extractExchangeKeyInfo(n,!0)}static _onOpenPasswordMenuButtonClicked(){let e=l.UserStore.getUsers(),t=l.GuildStore.getGuilds(),a=l.ChannelStore.getChannels(),r=$("#dc-password-channel-name"),n=H._getChannelId();do{if(!a[n]||-1===[0,1,3].indexOf(a[n].type)){r.text("Unknown");break}if(0===a[n].type){let e=t[a[n].guild_id];r.text(`${e.name} ( #${a[n].name} )`);break}if(1===a[n].type){let t=e[a[n].recipients[0]];r.text(`@${t.username}`);break}if(a[n].name)r.text(a[n].name);else{let t=a[n].recipients.length>3?3:a[n].recipients.length,i="";for(let r=0;r<t;r++){let t=e[a[n].recipients[r]];i+=`@${t.username}#${t.discriminator} `}r.text(`${i}`)}}while(0);$("#dc-overlay").css("display","block"),$("#dc-overlay-password").css("display","block")}static _onSavePasswordsButtonClicked(){let e=$("#dc-save-pwd"),t=$("#dc-password-primary"),a=$("#dc-password-secondary");if(!t.val().length||!a.val().length)return e.text("Please Fill In Both Fields !"),void setTimeout(()=>{e.text("Save Password")},1e3);H._updatePasswords(t.val(),a.val()),e.text("Saved!"),setTimeout(function(){e.text("Save Password"),t.val(""),a.val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}static _onResetPasswordsButtonClicked(){let e=$("#dc-reset-pwd");H._setAutoEncrypt(!1);let t=H._getChannelId();s.channels[t].primaryKey=s.channels[t].secondaryKey=null,H._saveConfig(),e.text("Password Reset!"),setTimeout(function(){e.text("Reset Password"),$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}static _onClosePasswordMenuButtonClicked(){$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),setTimeout(function(){$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},250)}static _onGeneratePassphraseClicked(){global.smalltalk.prompt("GENERATE A SECURE PASSPHRASE",'Please enter the approximate security level you\'d like this passphrase to have below.\nBe advised that a minimum security level of <b><u>192</u></b> bits is recommended.\n\nRead about Security Levels <a href="https://en.wikipedia.org/wiki/Security_level" target="_blank">here</a>.\n\n',"192").then(e=>{if("string"!=typeof e||!e.length||isNaN(e))return void global.smalltalk.alert("ERROR","Invalid number entered");let{entropy:t,passphrase:a}=H.__generateDicewarePassphrase({security:parseInt(e)});global.smalltalk.prompt(`GENERATED A PASSPHRASE WITH ${parseInt(e)} BITS OF SECURITY`,`This passphrase contains <b>${parseFloat(t.toString()).toFixed(3)} bits</b> of entropy and was generated using a word list containing <b>${Z.length}</b> words.\n\n\n`+"How long would this take a supercomputer to crack ?\n\nAssume a supercomputer can guess 1 <i>nonillion</i> passwords per second. ( 1,000,000,000,000,000,000,000,000,000,000x or 10^30 ):\n\nIt would take it about "+`${H.__exponentialString(Math.pow(2,t)/1e30/31536e3)} <b>years</b> to crack.\n\n\n`+"Here's your passphrase:\n\n",a).then(()=>{f.clipboard.writeText(a)},()=>{})},()=>{})}static _onCopyCurrentPasswordsButtonClicked(){let e=s.channels[H._getChannelId()];e&&e.primaryKey&&e.secondaryKey?(f.clipboard.writeText(`Primary Key: ${e.primaryKey}\r\n\r\nSecondary Key: ${e.secondaryKey}`),$("#dc-cpy-pwds-btn").text("Copied Keys To Clipboard!"),setTimeout(function(){$("#dc-cpy-pwds-btn").text("Copy Current Passwords!"),$("#dc-cancel-btn").click()},1e3)):f.clipboard.writeText(`Default Password: ${s.defaultPassword}`)}static _onForceEncryptButtonClicked(){let e=$("#dc-lock-btn"),t=$("<span>").addClass("dc-tooltip-text");H._getAutoEncrypt()?(e.html(Buffer.from(L,"base64").toString("utf8")),e.append(t.text("Enable Message Encryption")),H._setAutoEncrypt(!1)):(e.html(Buffer.from(W,"base64").toString("utf8")),e.append(t.text("Disable Message Encryption")),H._setAutoEncrypt(!0)),H._saveConfig()}static _updateLockIcon(){let e=$("#dc-lock-btn"),t=$("<span>").addClass("dc-tooltip-text");H._getAutoEncrypt()?(e.html(Buffer.from(W,"base64").toString("utf8")),e.append(t.text("Disable Message Encryption"))):(e.html(Buffer.from(L,"base64").toString("utf8")),e.append(t.text("Enable Message Encryption"))),$(".dc-svg").attr("class","dc-svg")}static _setActiveSettingsTab(e){let t=["dc-plugin-settings-tab","dc-database-settings-tab","dc-security-settings-tab"],a=$("#dc-settings-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(a.removeClass("active"),e){case 0:$("#dc-plugin-settings-btn").addClass("active"),$("#dc-plugin-settings-tab").css("display","block");break;case 1:$("#dc-database-settings-btn").addClass("active"),$("#dc-database-settings-tab").css("display","block");break;case 2:$("#dc-security-settings-btn").addClass("active"),$("#dc-security-settings-tab").css("display","block");break;case 3:$("#dc-about-settings-btn").addClass("active"),$("#dc-about-settings-tab").css("display","block")}}static _setActiveExchangeTab(e){let t=["dc-about-tab","dc-keygen-tab","dc-handshake-tab"],a=$("#dc-exchange-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(a.removeClass("active"),e){case 0:$("#dc-tab-info-btn").addClass("active"),$("#dc-about-tab").css("display","block");break;case 1:$("#dc-tab-keygen-btn").addClass("active"),$("#dc-keygen-tab").css("display","block");break;case 2:$("#dc-tab-handshake-btn").addClass("active"),$("#dc-handshake-tab").css("display","block")}}static _deriveExchangeKeys(e,t=2048){const a=e=>Buffer.from(e,"hex").toString("base64");let r=d[e],n=H.__computeExchangeSharedSecret(r.privateKey,r.remoteKey.key);if(!n)return null;let i=H.__binaryCompare(r.localKey.salt,r.remoteKey.salt),s=0===Buffer.compare(i,r.localKey.salt)?r.remoteKey.salt:r.localKey.salt;return{primaryKey:a(global.sha3.kmac256(i,n,t,x)),secondaryKey:a(global.sha3.kmac256(s,n,t,P))}}static _isFormattedMessage(e){return"string"==typeof e&&e.length>2&&"`"===e[0]&&"`"===e[e.length-1]}static _getNonce(){return H._fromTimestamp(Date.now())}static _getPluginName(){return"discordCrypt.plugin.js"}static _validPluginName(){let e=m.join(H._getPluginsPath(),H._getPluginName()),t=v.existsSync(e);return t||H.log(`Could not find the plugin's file.\nExpected: "${e}" ...`,"error"),t}static _getPluginsPath(){const e=`${h.env.HOME}/Library/Preferences`,t=`${h.env.HOME}/.config`;switch(h.platform){case"win32":return`${h.env.APPDATA}/BetterDiscord/plugins/`;case"darwin":return`${e}/BetterDiscord/plugins/`;case"linux":return v.existsSync(h.env.XDG_CONFIG_HOME)?`${h.env.XDG_CONFIG_HOME}/BetterDiscord/plugins/`:`${t}/BetterDiscord/plugins/`;default:throw H.log(`Unsupported platform detected: ${h.platform} ...`,"error"),"DEAD"}}static _getConfigPath(){return`${H._getPluginsPath()}${r.getName()}.config.json`}static _shouldIgnoreUpdates(e){const t=m.join(H._getPluginsPath(),H._getPluginName());return v.existsSync(t)&&(v.lstatSync(t).isSymbolicLink()||-1!==e.indexOf("-debug"))}static _checkForUpdate(e,t){const a=`https://gitlab.com/leogx9r/discordCrypt/raw/${k}`,r=`${a}/build/${H._getPluginName()}`,n=`${a}/CHANGELOG`,i=`${r}.sig.bin`;let s={version:"",payload:"",valid:!1,hash:"",signature:"",changelog:""};if("function"!=typeof e)return!1;try{H.__getRequest(r,(a,r,l)=>{if(200!==a){switch(a){case 404:H.log("Update URL is broken.","error");break;case 403:H.log("Forbidden request when checking for updates.","error");break;default:H.log(`Error while fetching update: ${a}:${r}`,"error")}return e(null),!1}let o='//META{"name":"discordCrypt"}*//\n';try{o=v.readFileSync(m.join(H._getPluginsPath(),H._getPluginName())).toString().replace("\r","")}catch(e){H.log("Plugin file could not be locally read. Assuming testing version ...","warn")}if(l.split("\n")[0]!==o.split("\n")[0])return H.log("Plugin metadata is missing from either the local or update file.","error"),e(null),!1;let c=global.sha3.sha3_256(o.replace("\r",""));if(s.hash=global.sha3.sha3_256(l.replace("\r","")),s.hash===c)return H.log(`No Update Needed - #${s.hash.slice(0,16)}`),e(null),!0;if(t&&t.length&&0!==t.filter(e=>e&&e.hash===s.hash).length)return H.log(`Ignoring update - #${s.hash.slice(0,16)}`),e(null),!0;try{s.version=l.match(/((["'])(\d+\.)(\d+\.)(\*|\d+)(["']))/gi).toString().replace(/(['|"]*['|"])/g,"")}catch(e){s.version="?.?.?",H.log("Failed to locate the version number in the update ...","warn")}let d=t=>{s.valid=t;try{H.__getRequest(n,(t,a,r)=>{s.changelog=200===t?r:"",e(s)})}catch(t){H.log("Error fetching the changelog.","warn"),s.changelog="",e(s)}};s.payload=l;try{H.__getRequest(i,(e,t,a)=>{200===e?(s.signature=a,d(H.__validateEd25519Signature(s.payload,s.signature,Buffer.from(U,"base64")))):d(!1)},null)}catch(e){H.log(`Unable to validate the update signature: ${e}`,"warn"),d(!1)}return!0})}catch(e){return H.log(`Error while retrieving update: ${e.toString()}`,"warn"),!1}return!0}static _getChannelId(){return window.location.pathname.split("/").pop()}static _getWebpackModuleSearcher(){const e="function"==typeof webpackJsonp?webpackJsonp([],{__extra_id__:(e,t,a)=>t.default=a},["__extra_id__"]).default:webpackJsonp.push([[],{__extra_id__:(e,t,a)=>e.exports=a},[["__extra_id__"]]]);delete e.m.__extra_id__,delete e.c.__extra_id__;const t=(t,a)=>{for(let a in e.c)if(e.c.hasOwnProperty(a)){let r=e.c[a].exports;if(r&&r.__esModule&&r.default&&(r=r.default),r&&t(r))return r}if(a){H.log("Couldn't find module in existing cache. Loading all modules.","warn");for(let a=0;a<e.m.length;++a)try{let r=e(a);if(r&&r.__esModule&&r.default&&t(r.default))return r.default;if(r&&t(r))return r}catch(e){H.log(`Could not load module index ${a} ...`,"warn")}H.log("Cannot find Webpack module.","warn")}return null},a=(e,a=!1)=>t(t=>t._dispatchToken&&"string"==typeof t._dispatchToken&&t._dispatchToken===`ID_${e}`&&t._actionHandlers,a);return{find:t,findByUniqueProperties:(e,a=!1)=>t(t=>e.every(e=>void 0!==t[e]),a),findByUniquePrototypes:(e,a=!1)=>t(t=>e.every(e=>t.prototype&&t.prototype[e]),a),findByDisplayName:(e,a=!1)=>t(t=>t.displayName===e,a),findByDispatchToken:a,findByDispatchNames(e){for(let t=0;t<500;t++){let r=a(t);if(r&&e.every(e=>r._actionHandlers.hasOwnProperty(e)))return r}return null}}}static _dumpWebpackModuleCallbacks(e=!0){const t=["_dependencies","_isInitialized","initialize","initializeIfNeeded","syncWith","waitFor","hasChangeCallbacks","emitChange","addChangeListener","addConditionalChangeListener","removeChangeListener","getDispatchToken","mustEmitChanges"];let a=[],r=0;return H._getWebpackModuleSearcher().find(n=>{if(!n.__esModule)return!1;a[r]={};for(let i in n)if(-1===t.indexOf(i))if(-1!==["_actionHandlers","_dispatchHandlers","_changeCallbacks"].indexOf(i)){if(!e)continue;a[r][i]={};for(let e in n[i])if(e.length&&n._actionHandlers.hasOwnProperty(e))try{a[r][i][e]=n[i][e].prototype.constructor.toString().split("{")[0]}catch(e){a[r][i]="N/A"}}else try{a[r][i]=n[i].toString().split("{")[0]}catch(e){a[r][i]="N/A"}return r++,!1}),a}static _getChannelProps(e){return(e=e||H._getChannelId())&&-1===["@me","activity"].indexOf(e)?l.ChannelStore.getChannel(e):null}static _deleteMessage(e,t,a){a.MessageController.deleteMessage(e,t)}static _dispatchMessage(e,t=null,a=null){if(!e.length)return;let r=t||H._getChannelId(),n=H._getChannelProps(r);if(0===n.type&&X.hasOwnProperty(n.guild_id))return void H.log("Blacklisted Guild. Ignoring outgoing message ...","warn");l.MessageQueue.original_enqueue({type:"send",message:{channelId:r,nonce:H._getNonce(),content:e,tts:!1}},e=>{if(e.ok)l.MessageController.receiveMessage(r,e.body),a=a||s.timedMessageExpires,s.timedMessages&&s.timedMessageExpires>0&&s.timedMessages.push({messageId:e.body.id,channelId:r,expireTime:Date.now()+6e4*a});else if(e.status>=400&&e.status<500&&e.body&&!l.MessageController.sendClydeError(r,e.body.code)){if(H.log(`Error sending message: ${e.status}`,"error"),null===l.EventDispatcher)return void H.log("Could not locate the EventDispatcher module!","error");l.EventDispatcher.dispatch({type:"MESSAGE_SEND_FAILED",messageId:e.body.id,channelId:r})}})}static _injectCSS(e,t){$("head").append($("<style>",{id:e.replace(/^[^a-z]+|[^\w-]+/gi,""),html:t}))}static _monkeyPatch(e,t,a){const r=(e,t)=>(...a)=>{try{return e(...a)}catch(e){H.log(`Error while '${t}'`,"error")}},{before:n,after:i,instead:s,once:l=!1,silent:o=!1,forcePatch:d=!1}=a,u=a.displayName||e.displayName||e.name||e.constructor.displayName||e.constructor.name;o||H.log(`Hooking ${t} ...`);let g=e[t];if(!g){if(!d){H.log(`Can't find non-existent method '${u}.${t}' to hook.`,"error");let e=()=>{};return{original:e,cancel:e}}e[t]=function(){},g=function(){}}const p=()=>{o||H.log(`Unhooking method: '${u}.${t}' ...`),e[t]=g};return e[t]=function(){const a={thisObject:this,methodArguments:arguments,cancelPatch:p,originalMethod:g,callOriginalMethod:()=>a.returnValue=a.originalMethod.apply(a.thisObject,a.methodArguments)};if(s){const n=r(s,`calling override instead of original for '${e[t].displayName}'`)(a);void 0!==n&&(a.returnValue=n)}else n&&r(n,`calling override before '${e[t].displayName}'`)(a),a.callOriginalMethod(),i&&r(i,`calling override after '${e[t].displayName}'`)(a);return l&&p(),a.returnValue},e[t].__monkeyPatched=!0,e[t].displayName=`Hooked ${e[t].displayName||t}`,e[t].unpatch=p,c.push(p),{original:g,cancel:p}}static log(e,t="info"){try{console[t](`%c[DiscordCrypt]%c - ${e}`,"color: #7f007f; font-weight: bold; text-shadow: 0 0 1px #f00, 0 0 2px #f0f, 0 0 3px #00f;","")}catch(e){console.error("[DiscordCrypt] - Error logging message ...")}}static _extractTimestamp(e){return global.bigInt(e).shiftRight(22).toJSNumber()+M}static _fromTimestamp(e){let t=e-M;return t<=0?"0":global.bigInt(t).shiftLeft(22).toString()}static __exponentialString(e){let t=e.toExponential().replace(".","").split(/e/i),a="",r=t[0],n=Number(t[1]);if(n>=0&&r.length>n)return n+=1,`${r.substring(0,n)}.${r.substring(n)}`;if(n<0){for(;++n;)a+="0";return`0.${a}${r}`}for(n=n-r.length+1;n>a.length;)a+="0";return r+a}static __validateEd25519Signature(e,t,a){let r=new global.Curve25519;r.setPublicKey(Buffer.from(a));try{return r.verify(Buffer.from(e),Buffer.from(t))}catch(e){return!1}}static __generateWordCaptcha(e){let t="";const a=["ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#%&'()*+./:;=?@$0123456789","ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#%&'()*+./:;=?@$0123456789","ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾᵠᴿˢᵀᵁⱽᵂˣʸᶻᵎ\"#%&'⁽⁾*⁺./:;⁼ˀ@$⁰¹²³⁴⁵⁶⁷⁸⁹"],r=a[0].toLowerCase();let n=H.__generateDicewarePassphrase(e),i=n.passphrase.split(" ");for(let e=0;e<i.length;e++){let n=y.randomBytes(i[e].length);for(let s=0;s<i[e].length;s++)t+=a[n[s]%a.length][r.indexOf(i[e][s])];t+=" "}return{passphrase:n.passphrase,captcha:t.trim()}}static __binaryCompare(e,t){switch(Buffer.compare(e,t)){case 1:return t;case-1:return e;case 0:default:return e}}static __validatePasswordRequisites(e){return!(e.length<32&&!new RegExp(/^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\W).*$/g).test(e))||(global.smalltalk.alert("Invalid Password Input","Your password <b>must be at least 8 characters</b> long and <u>must</u> contain a combination of alpha-numeric characters both uppercase and lowercase ( A-Z, a-z, 0-9 ) as well as at least one symbol <b>OR</b> be greater than 32 characters for the best security.<br/><br/><br/>Please enter a password meeting these requirements.<br/>We recommend you use a password manager like KeePassX or KeePassXC to easily store these."),!1)}static __zlibCompress(e,t="base64",a){let r=b.deflateSync(Buffer.isBuffer(e)?e:Buffer.from(e,t),{level:b.constants.Z_BEST_COMPRESSION,memLevel:b.constants.Z_BEST_COMPRESSION,strategy:b.constants.Z_DEFAULT_STRATEGY,chunkSize:65536,windowBits:15});return a?r.toString(a):r}static __zlibDecompress(e,t="base64",a="utf8"){let r=b.inflateSync(Buffer.isBuffer(e)?e:Buffer.from(e,t),{level:b.constants.Z_BEST_COMPRESSION,memLevel:b.constants.Z_BEST_COMPRESSION,strategy:b.constants.Z_DEFAULT_STRATEGY,chunkSize:65536,windowBits:15});return a?r.toString(a):r}static __loadLibraries(e=z){for(let t in e){let a=e[t];if(a.requiresBrowser&&"undefined"==typeof window){H.log(`Skipping loading of browser-required plugin: ${t} ...`,"warn");continue}let r=H.__zlibDecompress(a.code);a.requiresBrowser||a.requiresNode?(H.log(`Running ${t} in current VM context ...`),S.runInThisContext(require("module").wrap(r),{filename:t,displayErrors:!1})(module.exports,require,module,t,__dirname,process,global,Buffer)):(H.log(`Running ${t} in isolated VM context ...`),global[t.replace(".js","")]=S.runInNewContext(r,{filename:t,displayErrors:!1}))}}static __getRequest(e,t,a){try{return require("request")({url:e,gzip:!0,encoding:a,removeRefererHeader:!0},(e,a,r)=>{t(a.statusCode,e||a.statusMessage,r)})}catch(e){return t(-1,e.toString()),null}}static __encodeExchangeKey(e,t){let a=parseInt(y.randomBytes(1).toString("hex"),16)%16+16,r=Buffer.alloc(2+a+e.length);return r.writeInt8(t,0),r.writeInt8(a,1),y.randomBytes(a).copy(r,2),e.copy(r,2+a),w+H.__substituteMessage(r,!0)}static __exchangeBitLengthToCanonicalName(e){switch(e){case 224:return"`secp224k1` » *SECG Koblitz Curve Over A __224-Bit Prime Field__*";case 256:return"`x25519` » *High-Speed Curve Over A __256-Bit Prime Field__*";case 384:return"`secp384r1` » *NIST/SECG Curve Over A __384-Bit Prime Field__*";case 409:return"`sect409k1` » *NIST/SECG Curve Over A __409-Bit Binary Field__*";case 521:return"`secp521r1` » *NIST/SECG Curve Over A __521-Bit Prime Field__*";case 571:return"`sect571k1` » *NIST/SECG Curve Over A __571-Bit Binary Field__*";case 751:return"`sidhp751` » *Post-Quantum Supersingular Isogeny Curve Over A __751-Bit Prime Field__*"}return e>=768&&e<=8192?`\`Diffie-Hellman\`: *__${e}-Bits__*`:null}static __extractExchangeKeyInfo(e,t=!1){try{let a={},r=e.replace(/\r?\n|\r/g,"");if(t&&(r=r.slice(4)),r=H.__substituteMessage(r),r=Buffer.from(r,"hex"),!H.__isValidExchangeAlgorithm(r[0]))return null;a.fingerprint=global.sha3.sha3_256(r),a.index=parseInt(r[0]),a.bit_length=H.__indexToAlgorithmBitLength(r[0]),a.canonical_name=H.__exchangeBitLengthToCanonicalName(a.bit_length),a.algorithm=H.__indexToExchangeAlgorithmString(r[0]).split("-")[0].toLowerCase();let n=r.readInt8(1);return n<16||n>32?null:(a.salt=Buffer.from(r.subarray(2,2+n)),a.key=Buffer.from(r.subarray(2+n)),a)}catch(e){return null}}static __splitStringChunks(e,t){if(!t||t<=1)return e;const a=e.split(" ");let r=[],n="",i=!0;return a.forEach(e=>{for(n.length+e.length>t&&n.length&&(r.push(n),n=""),i?(n+=e,i=!1):n+=` ${e}`;n.length>t;)r.push(n.substr(0,t)),n=n.substr(t)}),n.length&&r.push(n),r}static __toBuffer(e,t){if(Buffer.isBuffer(e))return e;if("string"==typeof e)return Buffer.from(e,void 0===t?"utf8":t?"hex":"base64");if(Array.isArray(e))return Buffer.from(e);throw"Input is neither an Array(), Buffer() or a string."}static __getFileMimeType(e){let t=g.lookup(m.extname(e));return!1===t?"application/octet-stream":t}static __clipboardToBuffer(){let{clipboard:e}=f;if(!e)return{mime_type:"",name:"",data:null};if(0===e.availableFormats().length)return{mime_type:"",name:"",data:null};let t,a=e.availableFormats(),r="",n="",i=!1;for(let s=a.length-1;s>=0;s--){let l=a[s].split("/");switch(l[0]){case"image":switch(l[1].toLowerCase()){case"png":t=e.readImage().toPNG();break;case"bmp":case"bitmap":t=e.readImage().toBitmap();break;case"jpg":case"jpeg":t=e.readImage().toJPEG(100)}break;case"text":r=e.readText();try{u.statSync(r).isFile()?(t=u.readFileSync(r),n=m.basename(r),i=!0):t=Buffer.from(r,"utf8")}catch(e){t=Buffer.from(r,"utf8")}}if(t&&t.length>0)return i&&(a[s]=H.__getFileMimeType(r)),{mime_type:a[s],name:n,data:t}}return{mime_type:"",name:"",data:null}}static __up1SeedToKey(e,t){e="string"==typeof e?t.codec.base64url.toBits(e):t.codec.bytes.toBits(e);let a=t.hash.sha512.hash(e);return{seed:e,key:t.bitArray.bitSlice(a,0,256),iv:t.bitArray.bitSlice(a,256,384),ident:t.bitArray.bitSlice(a,384,512)}}static __up1EncryptBuffer(e,t,a,r,n,i){try{if(e.length>5e7)return void n("Input size must be < 50 MB.");e=Buffer.concat([function(e){let t=Buffer.alloc(2*e.length);for(let a=0,r=e.length;a<r;a++)t.writeUInt16BE(e.charCodeAt(a),2*a);return t}(JSON.stringify({mime:t,name:a})),Buffer.from([0,0]),e]),e=r.codec.bytes.toBits(new Uint8Array(e));let s=H.__up1SeedToKey(i||y.randomBytes(64),r);e=r.mode.ccm.encrypt(new r.cipher.aes(s.key),e,s.iv),n(null,Buffer.from(r.codec.bytes.fromBits(e)),r.codec.base64url.fromBits(s.ident),r.codec.base64url.fromBits(s.seed))}catch(e){n(e.toString())}}static __up1DecryptBuffer(e,t,a){const r=[85,80,49,0];let n,i=!0,s=0,l="",o=H.__up1SeedToKey(t,a),c=new Uint8Array(e);for(let e=0;e<r.length;e++)if(c[e]!==r[e]){i=!1;break}i&&(c=c.subarray(r.length));let d=a.mode.ccm.decrypt(new a.cipher.aes(o.key),a.codec.bytes.toBits(c),o.iv);for(n=new DataView(new Uint8Array(a.codec.bytes.fromBits(d)).buffer);;s++){let e=n.getUint16(2*s,!1);if(0===e)break;l+=String.fromCharCode(e)}return{header:l=JSON.parse(l),data:Buffer.from(a.codec.bytes.fromBits(d)).slice(2*s+2,e.length),blob:new Blob([d],{type:l.mime}).slice(2*s+2,e.length,l.mime)}}static __up1EncryptFile(e,t,a,r=!1){try{if(u.statSync(e).size>5e7)return void a("File size must be < 50 MB.");u.readFile(e,(n,i)=>{null===n?H.__up1EncryptBuffer(i,H.__getFileMimeType(e),r?y.pseudoRandomBytes(8).toString("hex")+m.extname(e):m.basename(e),t,a):a(n.toString())})}catch(e){a(e.toString())}}static __up1UploadClipboard(e,t,a,r,n){let i=void 0===n?H.__clipboardToBuffer():n;if(!i.mime_type.length||null===i.data)return void r("Invalid clipboard data.");let s=0===i.name.length?y.pseudoRandomBytes(16).toString("hex"):i.name;if(0===i.name.length){let e=g.extension(i.mime_type);e&&e.length&&(s+=`.${e}`)}this.__up1EncryptBuffer(i.data,i.mime_type,s,a,(a,n,i,s)=>{if(null!==a)return void r(a);let l=new p;l.append("ident",i),l.append("file",n,{filename:"file",contentType:"text/plain"}),void 0!==t&&"string"==typeof t&&l.append("api_key",t),require("request").post({headers:l.getHeaders(),uri:`${e}/up`,body:l},(t,a,n)=>{try{null!==t?r(t):r(null,`${e}/#${s}`,`/del?ident=${i}&delkey=${JSON.parse(n).delkey}`,s)}catch(e){r(e.toString())}})})}static __up1UploadFile(e,t,a,r,n,i=!1){this.__up1EncryptFile(e,r,(e,r,i,s)=>{if(null!==e)return void n(e);let l=new p;l.append("ident",i),l.append("file",r,{filename:"file",contentType:"text/plain"}),void 0!==a&&"string"==typeof a&&l.append("api_key",a),require("request").post({headers:l.getHeaders(),uri:`${t}/up`,body:l},(e,a,r)=>{try{null!==e?n(e):n(null,`${t}/#${s}`,`/del?ident=${i}&delkey=${JSON.parse(r).delkey}`,s)}catch(e){n(e.toString())}})},i)}static __up1DecryptDownload(e,t,a,r){let n=a.codec.base64url.fromBits(H.__up1SeedToKey(e,a).ident);return H.__getRequest(`${t}/i/${n}`,(t,n,i)=>{if(200===t&&"OK"===n)try{r(H.__up1DecryptBuffer(i,e,a))}catch(e){r(e.toString())}else r(`${t}: ${n}`)},null)}static __up1ExtractValidUp1URLs(e){let t=[];if(!e||!e.length)return t;let a=e.split(" ");for(let e=0;e<a.length;e++)try{-1!==a[e].indexOf(`${j}/#`)&&new URL(a[e])&&t.push(a[e])}catch(e){}return t}static __tryParseChangelog(e,t){const a=(e,t)=>{let a=e.replace(/(\.0+)+$/,"").split("."),r=t.replace(/(\.0+)+$/,"").split(".");for(let e=0;e<Math.min(a.length,r.length);e++){let t=parseInt(a[e],10)-parseInt(r[e],10);if(t)return t}return a.length-r.length};try{let r="",n=e.split("\r").join("").match(/((Version )(\d+\.)(\d+\.)(\*|\d+))/gm).sort(a);for(let i=n.length-1;i>0;i--){let s=a(t,n[i]);if(s>0||0===s)continue;let l=e.slice(e.indexOf(n[i]),e.indexOf(n[i-1]));r+=`${n[i]}\n\n`,r+=l.replace(n[i],"").replace("\n\n","")}return r}catch(e){H.log(`Failed to parse the changelog: ${e}`,"warn")}return e}static __generateDicewarePassphrase(e){const t=Z.length,a=Math.log2(t);let r="",{words:n,security:i}=e||{security:128};i&&!isNaN(i)?n=Math.round(i/a):n&&!isNaN(n)||(n=Math.round(128/a));for(let e=0;e<n;e++)r+=`${Z[Math.round(parseInt(y.randomBytes(4).toString("hex"),16)/4294967296*t)]} `;return{passphrase:r.trim(),entropy:a*n}}static __padMessage(e,t,a,r,n){let i,s;var l,o;switch(i=H.__toBuffer(e,r),s=n?0:(l=i.length)%(o=a/8)===o?o:o-l%o,t.toUpperCase()){case"PKC7":return function(e,t,a){if(void 0===a){let a=Buffer.alloc(e.length+t);return e.copy(a),Buffer.alloc(t).fill(t).copy(a,e.length),a}return e.slice(0,e.length-e.readInt8(e.length-1))}(i,s,n);case"ANS2":return function(e,t,a){if(void 0===a){let a=Buffer.alloc(e.length+t);return e.copy(a),Buffer.alloc(t-1).fill(0).copy(a,e.length),Buffer.alloc(1).fill(t).copy(a,e.length+t-1),a}return e.slice(0,e.length-e.readInt8(e.length-1))}(i,s,n);case"ISO1":return function(e,t,a){if(void 0===a){let a=Buffer.alloc(e.length+t);return e.copy(a),y.randomBytes(t-1).copy(a,e.length),a.writeUInt8(t,e.length+t-1),a}return e.slice(0,e.length-e.readUInt8(e.length-1))}(i,s,n);case"ISO9":return function(e,t,a){if(void 0===a){let a=Buffer.alloc(e.length+t);return e.copy(a),Buffer.alloc(1).fill(128).copy(a,e.length),Buffer.alloc(t-1).fill(0).copy(e,e.length+1),a}{let t=e.length-1;for(;t>0&&0===e[t];t--);let a=e.slice(0,t+1);return a.slice(0,a.length-1)}}(i,s,n);default:return""}}static __isValidCipher(e){let t=!1,a=e.toLowerCase();return y.getCiphers().every(e=>e!==a||(t=!0,!1)),t}static __validateKeyIV(e,t=256){let a=t/8;if(e.length!==a){let t;switch(a){case 8:case 16:case 20:case 24:case 32:t=global.sha3.sha3_512(e).slice(0,2*a);break;case 64:t=global.sha3.sha3_512(e);break;default:throw"Invalid block size specified for key or iv. Only 64, 128, 160, 192, 256 and 512 bit keys are supported."}return Buffer.from(t,"hex")}return Buffer.from(e)}static __validateMessage(e,t){try{return H.__toBuffer(e,t)}catch(e){throw"exception - Invalid message type."}}static __cipherStringToIndex(e,t){let a=0;if("number"==typeof e)return e;switch("string"==typeof e&&-1!==e.search("-")&&void 0===t&&(t=(e=e.split("-")[0]).split("-")[1]),e){case"bf":break;case"aes":a=1;break;case"camel":a=2;break;case"idea":a=3;break;case"tdes":a=4;break;default:return 0}if(void 0!==t)switch(t){case"bf":break;case"aes":a+=5;break;case"camel":a+=10;break;case"idea":a+=15;break;case"tdes":a+=20}return a}static __cipherIndexToString(e,t){return void 0!==t&&t?e>=20?"tdes":e>=15?"idea":e>=10?"camel":e>=5?"aes":"bf":(e>=20?e-=20:e>=15&&e<=19?e-=15:e>=10&&e<=14?e-=10:e>=5&&e<=9&&(e-=5),1===e?"aes":2===e?"camel":3===e?"idea":4===e?"tdes":"bf")}static __entropicBitLength(e){let t,a=Object.create(null),r=0,n=e.length;for(t in e.split("").forEach(e=>{a[e]?a[e]++:a[e]=1}),a){let e=a[t]/n;r-=e*Math.log2(e)}return parseInt(r*n)}static __getBraille(){return Array.from("⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿")}static __getDHBitSizes(){return[768,1024,1536,2048,3072,4096,6144,8192]}static __getECDHBitSizes(){return[224,256,384,409,521,571,751]}static __isValidExchangeAlgorithm(e){return e>=0&&e<=H.__getDHBitSizes().length+H.__getECDHBitSizes().length-1}static __indexToExchangeAlgorithmString(e){let t=H.__getDHBitSizes(),a=H.__getECDHBitSizes(),r=["DH-","ECDH-"];return H.__isValidExchangeAlgorithm(e)?e<=t.length-1?r[0]+t[e]:r[1]+a[e-t.length]:"Invalid Algorithm"}static __indexToAlgorithmBitLength(e){let t=H.__getDHBitSizes(),a=H.__getECDHBitSizes();return H.__isValidExchangeAlgorithm(e)?e<=t.length-1?t[e]:a[e-t.length]:0}static __computeExchangeSharedSecret(e,t,a,r){let n,i;n=a?"base64":"hex",i=r?"base64":"hex";try{if(e.computeSecret&&"function"==typeof e.computeSecret)return e.computeSecret(t,n,i);let a=global.sidh.computeSecret(Buffer.from(t,n),e.privateKey);return i?a.toString(i):a}catch(e){return null}}static __generateDH(e,t){let a,r;switch(e){case 768:a="modp1";break;case 1024:a="modp2";break;case 1536:a="modp5";break;case 2048:a="modp14";break;case 3072:a="modp15";break;case 4096:a="modp16";break;case 6144:a="modp17";break;case 8192:a="modp18";break;default:return null}try{r=y.getDiffieHellman(a)}catch(e){return null}return null!=r&&void 0!==r.generateKeys&&(void 0===t?r.generateKeys():void 0!==r.setPrivateKey&&r.setPrivateKey(t)),r}static __generateECDH(e,t){let a,r;switch(e){case 224:a="secp224k1";break;case 384:a="secp384r1";break;case 409:a="sect409k1";break;case 521:a="secp521r1";break;case 571:a="sect571k1";break;case 256:case 751:break;default:return null}try{switch(e){case 751:r=global.sidh.generateKeys();break;case 256:(r=new global.Curve25519).generateKeys(void 0,y.randomBytes(32));break;default:r=y.createECDH(a)}}catch(e){return null}return null!=r&&void 0!==r.generateKeys&&256!==e&&(void 0===t?r.generateKeys("hex","compressed"):void 0!==r.setPrivateKey&&r.setPrivateKey(t)),r}static __substituteMessage(e,t){let a=H.__getBraille(),r="",n=0;if(void 0!==t){if(!Buffer.isBuffer(e))throw"Message input is not a buffer.";for(let t=0;t<e.length;t++)r+=a[e[t]]}else for(let t=0;t<e.length;t++){if(-1===(n=a.indexOf(e[t])))throw"Message contains invalid characters.";r+=`0${n.toString(16)}`.slice(-2)}return r}static __metaDataEncode(e,t,a,r){"string"==typeof e&&(e=H.__cipherStringToIndex(e)),"string"==typeof t&&(t=["cbc","cfb","ofb"].indexOf(t.toLowerCase())),"string"==typeof a&&(a=["pkc7","ans2","iso1","iso9"].indexOf(a.toLowerCase()));let n=Buffer.from([e,t,a,parseInt(r)]);return H.__substituteMessage(n,!0)}static __metaDataDecode(e){return Buffer.from(H.__substituteMessage(e),"hex")}static __encrypt(e,t,a,r,n,i,s,l=256,o=128,c){const d=`${e}${void 0===t?"":"-"+t}`;let u,g,p,f,h,m;if(!H.__isValidCipher(d)||-1===["cbc","cfb","ofb"].indexOf(t.toLowerCase()))return null;if(u=H.__padMessage(r,a,l,s),g=H.__validateKeyIV(n,l),void 0!==c){if(!(f=H.__toBuffer(c))||0===f.length)return null;8!==f.length&&(f=Buffer.from(global.sha3.sha3_256(f).slice(0,16),"hex"))}else f=y.randomBytes(8);p=(h=Buffer.from(global.sha3.kmac_256(g,f,o+l,E),"hex")).slice(0,o/8),g=h.slice(o/8,o/8+l/8),(m=y.createCipheriv(d,g,p)).setAutoPadding(!1);let b=m.update(u,void 0,"hex");return b+=m.final("hex"),Buffer.from(f.toString("hex")+b,"hex").toString(i?"hex":"base64")}static __decrypt(e,t,a,r,n,i,s,l=256,o=128){const c=`${e}${void 0===t?"":"-"+t}`;let d,u,g,p,f,h;if(!H.__isValidCipher(c)||-1===["cbc","ofb","cfb"].indexOf(t.toLowerCase()))return null;d=H.__validateMessage(r,s),u=H.__validateKeyIV(n,l),p=d.slice(0,8),g=(f=Buffer.from(global.sha3.kmac_256(u,p,o+l,E),"hex")).slice(0,o/8),u=f.slice(o/8,o/8+l/8),d=d.slice(8),(h=y.createDecipheriv(c,u,g)).setAutoPadding(!1);let m=h.update(d,void 0,"hex");return m+=h.final("hex"),(m=H.__padMessage(m,a,l,!0,!0)).toString(i)}static __symmetricEncrypt(e,t,a,r,n,i){function s(e,t,a,r,n){switch(a){case 0:return H.__blowfish512_encrypt(e,t,r,n);case 1:return H.__aes256_encrypt(e,t,r,n);case 2:return H.__camellia256_encrypt(e,t,r,n);case 3:return H.__idea128_encrypt(e,t,r,n);case 4:return H.__tripledes192_encrypt(e,t,r,n);default:return null}}let l=n.toLowerCase(),o=i,c="";if(r>=0&&r<=4)c=H.__blowfish512_encrypt(s(e,t,r,l,o),a,l,o,!0,!1);else if(r>=5&&r<=9)c=H.__aes256_encrypt(s(e,t,r-5,l,o),a,l,o,!0,!1);else if(r>=10&&r<=14)c=H.__camellia256_encrypt(s(e,t,r-10,l,o),a,l,o,!0,!1);else if(r>=15&&r<=19)c=H.__idea128_encrypt(s(e,t,r-15,l,o),a,l,o,!0,!1);else{if(!(r>=20&&r<=24))throw`Unknown cipher selected: ${r}`;c=H.__tripledes192_encrypt(s(e,t,r-20,l,o),a,l,o,!0,!1)}let d=global.sha3.kmac256(new Uint8Array(Buffer.concat([t,a])),new Uint8Array(Buffer.from(c,"hex")),256,I);return c=Buffer.from(d+c,"hex"),H.__substituteMessage(c,!0)}static __symmetricDecrypt(e,t,a,r,n,i){const s=new Uint8Array(Buffer.from("discordCrypt MAC"));function l(e,t,a,r,n,i="utf8",s){switch(a){case 0:return H.__blowfish512_decrypt(e,t,r,n,i,s);case 1:return H.__aes256_decrypt(e,t,r,n,i,s);case 2:return H.__camellia256_decrypt(e,t,r,n,i,s);case 3:return H.__idea128_decrypt(e,t,r,n,i,s);case 4:return H.__tripledes192_decrypt(e,t,r,n,i,s);default:return null}}let o,c;if("string"!=typeof n)if(0===n)o="cbc";else if(1===n)o="cfb";else{if(2!==n)return"";o="ofb"}if("string"!=typeof i)if(0===i)c="pkc7";else if(1===i)c="ans2";else if(2===i)c="iso1";else{if(3!==i)return"";c="iso9"}try{e=Buffer.from(H.__substituteMessage(e),"hex");let n=Buffer.from(e.subarray(0,32));e=Buffer.from(e.subarray(32));let i=Buffer.from(global.sha3.kmac256(new Uint8Array(Buffer.concat([t,a])),new Uint8Array(e),256,s),"hex");return y.timingSafeEqual(i,n)?r>=0&&r<=4?l(H.__blowfish512_decrypt(e,a,o,c,"base64"),t,r,o,c,"utf8",!1):r>=5&&r<=9?l(H.__aes256_decrypt(e,a,o,c,"base64"),t,r-5,o,c,"utf8",!1):r>=10&&r<=14?l(H.__camellia256_decrypt(e,a,o,c,"base64"),t,r-10,o,c,"utf8",!1):r>=15&&r<=19?l(H.__idea128_decrypt(e,a,o,c,"base64"),t,r-15,o,c,"utf8",!1):r>=20&&r<=24?l(H.__tripledes192_decrypt(e,a,o,c,"base64"),t,r-20,o,c,"utf8",!1):-3:1}catch(e){return 2}}static __blowfish512_encrypt(e,t,a,r,n=!1,i,s){return H.__encrypt("bf",a,r,e,t,n,i,512,64,s)}static __blowfish512_decrypt(e,t,a,r,n="utf8",i){return H.__decrypt("bf",a,r,e,t,n,i,512,64)}static __aes256_encrypt(e,t,a,r,n=!1,i,s){return H.__encrypt("aes-256",a,r,e,t,n,i,256,128,s)}static __aes256_decrypt(e,t,a,r,n="utf8",i){return H.__decrypt("aes-256",a,r,e,t,n,i,256,128)}static __aes256_encrypt_gcm(e,t,a,r=!1,n,i,s){let l,o,c,d,u,g;if(l=H.__padMessage(e,a,256,n),o=H.__validateKeyIV(t,256),void 0!==s){if(!(d=H.__toBuffer(s))||0===d.length)return null;8!==d.length&&(d=Buffer.from(global.sha3.sha3_256(d).slice(0,16),"hex"))}else d=y.randomBytes(8);c=(u=Buffer.from(global.sha3.kmac_256(o,d,384,E),"hex")).slice(0,16),o=u.slice(16,48),g=y.createCipheriv("aes-256-gcm",o,c),void 0!==i&&g.setAAD(H.__toBuffer(i)),g.setAutoPadding(!1);let p=g.update(l,void 0,"hex");return p+=g.final("hex"),Buffer.from(g.getAuthTag().toString("hex")+d.toString("hex")+p,"hex").toString(r?"hex":"base64")}static __aes256_decrypt_gcm(e,t,a,r="utf8",n,i){let s,l,o,c,d,u,g;s=H.__validateMessage(e,n),l=H.__validateKeyIV(t,256),d=s.slice(0,16),c=(s=s.slice(16)).slice(0,8),s=s.slice(8),o=(u=Buffer.from(global.sha3.kmac_256(l,c,384,E),"hex")).slice(0,16),l=u.slice(16,48),(g=y.createDecipheriv("aes-256-gcm",l,o)).setAuthTag(d),void 0!==i&&g.setAAD(H.__toBuffer(i)),g.setAutoPadding(!1);let p=g.update(s,void 0,"hex");return p+=g.final("hex"),(p=H.__padMessage(p,a,256,!0,!0)).toString(r)}static __camellia256_encrypt(e,t,a,r,n=!1,i,s){return H.__encrypt("camellia-256",a,r,e,t,n,i,256,128,s)}static __camellia256_decrypt(e,t,a,r,n="utf8",i){return H.__decrypt("camellia-256",a,r,e,t,n,i,256,128)}static __tripledes192_encrypt(e,t,a,r,n=!1,i,s){return H.__encrypt("des-ede3",a,r,e,t,n,i,192,64,s)}static __tripledes192_decrypt(e,t,a,r,n="utf8",i){return H.__decrypt("des-ede3",a,r,e,t,n,i,192,64)}static __idea128_encrypt(e,t,a,r,n=!1,i,s){return H.__encrypt("idea",a,r,e,t,n,i,128,64,s)}static __idea128_decrypt(e,t,a,r,n="utf8",i){return H.__decrypt("idea",a,r,e,t,n,i,128,64)}}return C._freeze(H.prototype),C._freeze(H),H})();Object.freeze(discordCrypt),module.exports={discordCrypt:discordCrypt};

/*@end @*/
